import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
import random

import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical
from keras.datasets import mnist
 
%matplotlib inline

////////////////////////////////////////////////////////////////////////////////

# Load and preprocess data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize pixel values to [0, 1]

///////////////////////////////////////////////////////////////////////////////////

#shape of train and test part
print(f"{x_train.shape}")
print(f"{y_train.shape}")
print(f"{x_test.shape}")
print(f"{y_test.shape}")

///////////////////////////////////////////////////////////////////////////////////////

# Convert labels to one-hot encoded vectors
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

///////////////////////////////////////////////////////////////////////////////////////

# Build the neural network model
model = Sequential([
    Flatten(input_shape=(28, 28)),  # Flatten the 28x28 images to 1D
    Dense(256, activation='relu'),
    Dense(128, activation='relu'),  # Fully connected layer with 128 neurons
    Dense(10, activation='softmax') # Output layer with 10 neurons for 10 classes
])

////////////////////////////////////////////////////////////////////////////////////////

# Compile the model
model.compile(optimizer='sgd',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

///////////////////////////////////////////////////////////////////////////////////////

# Train the model
history = model.fit(x_train, y_train, epochs=5, validation_split=0.1)

///////////////////////////////////////////////////////////////////////////////////////

# Evaluate the model
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f'\nTest accuracy: {test_acc}')

////////////////////////////////////////////////////////////////////////////////////////////

train_loss,train_acc = model.evaluate(x_train,y_train,verbose=2)
print(f'\nTrain accuracy: {train_acc}')

///////////////////////////////////////////////////////////////////////////////////////

# Plot training & validation accuracy and loss values
plt.figure(figsize=(12, 5))

# Plot accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'])

# Plot loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'])

plt.show()

///////////////////////////////////////////////////////////////////////////////////////////////

# Prediction example

# Select a sample image
sample_index = 0
sample_image = x_test[sample_index].reshape(1, 28, 28)  # Reshape for the model
prediction = model.predict(sample_image)
predicted_class = np.argmax(prediction)

plt.imshow(x_test[sample_index], cmap='gray')
plt.title(f'Predicted class: {predicted_class}')
plt.show()
